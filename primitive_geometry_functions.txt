# Primitive Geometry Functions
# This file lists all primitive geometry functions that can be used directly without going through the factory layer

## Basic Shape Generation
Location: infinigen/infinigen/assets/utils/draw.py
- surface_from_func(fn, div_x=16, div_y=16, size_x=2, size_y=2)
  Creates a surface from a mathematical function
- bezier_curve(anchors, vector_locations=(), resolution=None, to_mesh=True)
  Creates a bezier curve from anchor points
- align_bezier(anchors, axes=None, scale=None, vector_locations=(), resolution=None, to_mesh=True)
  Creates an aligned bezier curve with specified axes and scaling
- spin(anchors, vector_locations=(), resolution=None, rotation_resolution=None, axis=(0, 0, 1), loop=False, dupli=False)
  Creates a surface by spinning a curve around an axis
- leaf(x_anchors, y_anchors, vector_locations=(), subdivision=64, face_size=None)
  Creates a leaf shape from x and y anchor points

## Shape Modification
Location: infinigen/infinigen/assets/utils/draw.py
- shape_by_angles(obj, angles, scales=None, displacements=None, method="quadratic")
  Modifies a shape based on angular parameters
- shape_by_xs(obj, xs, displacements, method="quadratic")
  Modifies a shape based on x-coordinate parameters
- curve2mesh(obj)
  Converts a curve to a mesh
- remesh_fill(obj, resolution=0.005)
  Remeshes and fills a shape
- cut_plane(obj, cut_center, cut_normal, clear_outer=True)
  Cuts a shape along a plane

## Mesh Operations
Location: infinigen/infinigen/assets/utils/mesh.py
- build_prism_mesh(n=6, r_min=1.0, r_max=1.5, height=0.3, tilt=0.3)
  Builds a prism mesh with customizable parameters
- polygon2obj(p, reversed=False, z=0, dissolve=True)
  Converts a polygon to a 3D object

## Geometry Node Operations
Location: infinigen/infinigen/assets/utils/nodegroup.py
- geo_radius(nw, radius, resolution=6, merge_distance=0.004, rotation=0, to_align_tilt=True, align_tilt_axis=(0, 0, 1))
  Creates a radius-based geometry
- geo_shortest_path(nw, end_index, weight, trim_threshold=0.1, offset=0.0, merge_threshold=0.005, subdiv=0)
  Creates a shortest path geometry
- geo_symmetric_texture(nw, offset, selection=None)
  Creates a symmetric texture geometry
- geo_spikes(nw, spikes, points_fn=None, realize=True)
  Creates spike geometry

## Vertex Operations
Location: infinigen/infinigen/assets/utils/decorate.py
- displace_vertices(obj, fn)
  Displaces vertices based on a function
- solidify(obj, axis, thickness)
  Solidifies a shape along an axis

## Transformation Operations
Location: infinigen/infinigen/assets/utils/object.py
- obj2trimesh(obj)
  Converts an object to a trimesh
- plusx_cylinder_unwrap(part)
  Unwraps a cylinder along the +X axis
- offset_center(obj, x=True, z=True)
  Offsets an object's center

## Point Operations
Location: infinigen/infinigen/assets/objects/trees/utils/geometrynodes.py
- sample_points_and_normals(obj, max_density=3, surface_dist=1, max_points=10000)
  Samples points and their normals from an object

## Scatter Operations
Location: infinigen/infinigen/assets/scatters/utils/cluster.py
- cluster_scatter(nw, base_obj, collection, density, instance_index=None, radius=0.02, min_distance=0.0, buckets=((10000, 0.0)), scaling=(1, 1, 1), normal=None, selection=True, ground_offset=0, realize_instances=False, material=None, perturb_normal=0.1, z_rotation="musgrave", transform_space="ORIGINAL", reset_children=True)
  Scatters objects in a cluster pattern

## Segment Operations
Location: infinigen/infinigen/assets/objects/creatures/parts/utils/draw.py
- make_segments(x_cuts, y_cuts, x_anchors, y_anchors, params)
  Creates segments from cuts and anchors
- decorate_segment(obj, params, x_start, x_end)
  Decorates a segment with parameters

## Attachment Operations
Location: infinigen/infinigen/assets/objects/creatures/util/creature.py
- apply_attach_transform(part, target, att)
  Applies attachment transformations

## Interpolation Functions
Location: infinigen/infinigen/assets/utils/draw.py
- make_circular_interp(low, high, n, fn=uniform)
  Creates a circular interpolation

Note: All these functions can be used directly without going through the factory layer. They form the building blocks for creating more complex geometries and can be combined to create custom objects. 